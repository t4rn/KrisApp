@model KrisApp.Models.Calc.UodModel

@{
    ViewBag.Title = "Umowa o dzieło";
}

<h2>@ViewBag.Title</h2>
<hr />
<div class="row">
    <div class="col-md-6">
        <h3>Dane wejściowe</h3>

        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()

            <div class="form-horizontal">

                <div class="form-group">
                    @Html.LabelFor(model => model.Limit, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-6">
                        @Html.EditorFor(model => model.Limit, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                        @Html.ValidationMessageFor(model => model.Limit, "", new { @class = "text-danger" })
                    </div>
                </div>

                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="form-group">
                    @Html.LabelFor(model => model.BruttoAmountPerMonth, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-6">
                        @Html.EditorFor(model => model.BruttoAmountPerMonth, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.BruttoAmountPerMonth, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-offset-4 col-md-8">
                        <input type="submit" value="Policz" class="btn btn-success" />
                    </div>
                </div>
            </div>
        }

        @if (Model.SavedSummaries != null && Model.SavedSummaries.Any())
        {
            <h3>Poprzednie wyniki</h3>
            <table class="table table-striped">
                <tr>
                    <th>@Html.DisplayNameFor(x => x.SavedSummaries[0].Brutto)</th>
                    <th>@Html.DisplayNameFor(x => x.SavedSummaries[0].NettoMax)</th>
                    <th>@Html.DisplayNameFor(x => x.SavedSummaries[0].NettoMin)</th>
                    <th>@Html.DisplayNameFor(x => x.SavedSummaries[0].Average)</th>
                    <th>@Html.DisplayNameFor(x => x.SavedSummaries[0].Sum)</th>
                </tr>

                @foreach (var item in Model.SavedSummaries)
                {
                    <tr>
                        <td>@item.Brutto</td>
                        <td>@item.NettoMax</td>
                        <td>@item.NettoMin</td>
                        <td>@item.Average</td>
                        <td>@item.Sum</td>
                    </tr>
                }
            </table>
        }
    </div>
    <div class="col-md-6">
        <h3>Wyniki</h3>

        @if (Model.CurrentSummary?.NettoAmounts != null)
        {
            <table class="table table-striped">
                <tr>
                    <th>Miesiąc</th>
                    <th>Kwota netto</th>
                </tr>

                @foreach (var item in Model.CurrentSummary.NettoAmounts)
                {
                    <tr>
                        <td>
                            @Html.DisplayFor(modelItem => item.Key)
                        </td>
                        <td>
                            @item.Value.ToString("n") zł
                        </td>
                    </tr>
                }
                <tr><td><b>Rocznie</b></td><td><b>@Model.CurrentSummary.Sum zł</b></td></tr>
                <tr><td><b>Średnio na miesiąc</b></td><td><b>@Model.CurrentSummary.Average zł</b></td></tr>
            </table>
        }
    </div>
</div>